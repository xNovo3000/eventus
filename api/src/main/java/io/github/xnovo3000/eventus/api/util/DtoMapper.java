package io.github.xnovo3000.eventus.api.util;

import io.github.xnovo3000.eventus.api.dto.input.ProposeEventDto;
import io.github.xnovo3000.eventus.api.dto.input.ProposeEventDtoZoned;
import io.github.xnovo3000.eventus.api.dto.output.EventCardDto;
import io.github.xnovo3000.eventus.api.dto.output.EventDto;
import io.github.xnovo3000.eventus.api.dto.output.SubscriptionDto;
import io.github.xnovo3000.eventus.api.dto.output.UserDto;
import io.github.xnovo3000.eventus.api.entity.Event;
import io.github.xnovo3000.eventus.api.entity.Subscription;
import io.github.xnovo3000.eventus.api.entity.User;
import org.jetbrains.annotations.NotNull;
import java.util.TimeZone;

/**
 * Map functions generated by MapStruct to map Entity to DTO beans
 */
public interface DtoMapper {

    /* Event */

    /**
     * Create an EventDto starting from an Event. This method evaluates also the username
     * to check if 'canSubscribe', 'canUnsubscribe' and 'canRate' must be true or false
     *
     * @param event The Event
     * @param username The user's username
     * @return The EventDto
     */
    @NotNull EventDto toEventDto(@NotNull Event event, String username);

    /**
     * Create an EventDto starting from an Event. The fields 'canSubscribe',
     * 'canUnsubscribe' and 'canRate' are set to false
     *
     * @param event The Event
     * @return The EventCardDto
     */
    @NotNull EventCardDto toEventCardDto(@NotNull Event event);

    /**
     * Create an EventCardDto starting from an Event. This method evaluates also the username
     * to check if 'canSubscribe', 'canUnsubscribe' and 'canRate' must be true or false
     *
     * @param event The Event
     * @param username The user's username
     * @return The EventCardDto
     */
    @NotNull EventCardDto toEventCardDto(@NotNull Event event, String username);

    /* Subscription */

    /**
     * Create a SubscriptionDto from a Subscription
     *
     * @param subscription The Subscription
     * @return The SubscriptionDto
     */
    @NotNull SubscriptionDto toSubscriptionDto(@NotNull Subscription subscription);

    /* ProposeEvent */

    /**
     * Create a ProposeEventDtoZoned from a ProposeEventDto and its timezone
     *
     * @param proposeEventDto The ProposeEventDtoZoned
     * @param timeZone The timezone of the user
     * @return The ProposeEventDtoZoned
     */
    @NotNull ProposeEventDtoZoned toProposeEventDtoZoned(@NotNull ProposeEventDto proposeEventDto, @NotNull TimeZone timeZone);

    /* User */

    /**
     * Create a UserDto from a User
     *
     * @param user The User
     * @return The UserDto
     */
    @NotNull UserDto toUserDto(@NotNull User user);

}